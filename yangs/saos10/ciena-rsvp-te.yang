module ciena-rsvp-te {
   namespace "http://ciena.com/ns/yang/ciena-rsvp-te";
   prefix ciena-rsvpte;

   import ietf-inet-types {
      prefix inet;
   }
   import ciena-ietf-te {
      prefix "ciena-te";
   }
   import ciena-rsvp {
      prefix "ciena-rsvp";
   }
   import openconfig-mpls-types {
      prefix oc-mplst; 
   }
   import openconfig-types {
      prefix oc-types;
   }
   organization
      "Ciena Corporation";

   contact
      "Web URL: http://www.ciena.com/
       E-mail:  yang@ciena.com
       Postal:  7035 Ridge Road
       Hanover, Maryland 21076
       U.S.A.
       Phone:   +1 800-921-1144
       Fax:     +1 410-694-5750";

   description
      "This module contains the Ciena proprietary YANG defintions
       for the RSVP-TE tunnel configuration and state information.
       Copyright (c) 2022 Ciena Corporation.  All rights reserved.

       All information contained herein is, and remains
       the property of Ciena Corporation. Dissemination of this
       information or reproduction of this material is strictly
       forbidden unless prior written permission is obtained from
       Ciena Corporation.";

   revision "2022-07-20" {
      description
         "1. Initial Version for RSVP-TE Support.
          2. It includes RSVP tunnel config parameters.
          3. It includes tunnel bandwidth and RSVP path.";
   }

   typedef te-bandwidth-type {
      type enumeration {
         enum SPECIFIED {
            description
               "Bandwidth is explicitly specified";
         }
         enum AUTO {
            description
               "Bandwidth is automatically computed";
         }
      }
      description
         "Enumerated type for specifying whether bandwidth is
          explicitly specified or automatically computed";
   } 
  
   typedef mpls-hop-type {
      type enumeration {
         enum LOOSE {
            description
               "Loose hop in an explicit path";
         }
         enum STRICT {
            description
               "Strict hop in an explicit path";
         }
      }
      description
         "Enumerated type for specifying loose or strict
          paths";
   }
   grouping p2p-path-state {
      description
         "Operational state parameters for P2P paths";
      leaf-list associated-rsvp-sessions {
         type leafref {
            path "/ciena-rsvp:rsvp-te/ciena-rsvp:sessions/ciena-rsvp:session/ciena-rsvp:local-index";
         }
         description
            "If the signalling protocol specified for this path is
             RSVP-TE, this leaf-list provides a reference to the associated
             sessions within the RSVP-TE protocol sessions list, such
             that details of the signaling can be retrieved. More than
             one session may exist during re-signalling such as
             make-before-break.";
      }
   }

   grouping p2p-path-config {
      description
         "Configuration parameters for P2P paths";

      leaf name {
         type string {
            length "1..128";
         }
         description
            "Path name";
      }
      leaf path-computation-method {
         type identityref {
            base oc-mplst:PATH_COMPUTATION_METHOD;
         }
         default oc-mplst:LOCALLY_COMPUTED;
         description
            "The method used for computing the path, either
             locally computed, queried from a server or not
             computed at all (explicitly configured).";
      }
      leaf use-cspf {
         when "../path-computation-method = 'oc-mplst:LOCALLY_COMPUTED'" {
         description
            "The use of CSPF when the path-computation method is
             local computation";
         }
         type boolean;
         description
            "Flag to enable CSPF for locally computed LSPs";
      }
      leaf metric-type {
         type identityref {
            base oc-mplst:PATH_METRIC_TYPE;
         }
         default oc-mplst:IGP_METRIC;
         description
            "Path metric type";
      }
      leaf explicit-path-name {
         when "../path-computation-method = 'oc-mplst:EXPLICITLY_DEFINED'" {
         description
            "The name of the explicitly defined path used";
         }
         type leafref {
            path "/named-explicit-paths/named-explicit-path/config/name";
         }
         description
            "Reference to a defined path";
      }
      uses ciena-rsvp:rsvp-p2p-path-attributes-config; 
   }
  
   grouping explicit-route-subobject-config {
      description
         "The explicit route subobject grouping";
      leaf address {
         type inet:ip-address;
         description
         "Router hop for the LSP path";
      }
      leaf hop-type {
         type mpls-hop-type;
         description
            "Strict or loose hop";
      }
      leaf index {
         type uint8 {
            range "0..255";
         }
         description
            "Index of this explicit route object to express
             the order of hops in the path";
      }
   }
 
   grouping named-explicit-path-config {
      description
         "Configuration parameters relating to a named
          explicit path";

      leaf name {
         type string {
            length "1..255";
         }
         description
            "A string name that uniquely identifies an explicit
             path";
      }
   }

   container named-explicit-paths {
      description
         "Enclosing container for the named explicit paths";
      list named-explicit-path {
         key "name";
         description
            "A list of explicit paths";
         leaf name {
            type leafref {
               path "../config/name";
            }
            description
               "A string name that uniquely identifies
                an explicit path";
         }
         container config {
            description
               "Configuration parameters relating to named explicit
                paths";
            uses named-explicit-path-config;
         }
         container explicit-route-objects {
            description
               "Enclosing container for EROs";
            list explicit-route-object {
               key "index";
               description
                  "List of explicit route objects";
               leaf index {
                  type leafref {
                     path "../config/index";
                  }
                  description
                     "Index of this explicit route object,
                      to express the order of hops in path";
               }  
               container config {
                  description
                     "Configuration parameters relating to an explicit
                      route";
                  uses explicit-route-subobject-config;
               }
            }
         }
      }
   }

   grouping te-path-placement-constraints-top {
      description
         "Top-level grouping ";
      container admin-groups {
         description
            "Top-level container for include/exclude constraints for
             link affinities";
         container config {
            description
               "Configuration data ";
            uses te-path-placement-constraints-config;
         }
      }
   }
  
   grouping p2p-primary-paths-top {
      description
         "Top level grouping for P2P primary paths";
      container p2p-primary-path {
         description
            "Primary paths associated with the LSP";
         list p2p-primary-path {
            key "name";
            description
               "List of P2P primary paths for a tunnel";
            leaf name {
               type leafref {
                  path "../config/name";
               } 
               description
                  "Path name";
            }
            container config {
               description
                  "Configuration parameters related to paths";
               uses p2p-path-config;
            }
            container state {
               config false;
               description
                  "State parameters related to paths";
               uses p2p-path-state;
            }
            uses te-path-placement-constraints-top; 
         }
      }
   }

   grouping te-path-placement-constraints-config {
      description
         "Configuration data for link affinities";

      leaf-list exclude-group {
         type leafref {
            path "/ciena-te:te/ciena-te:globals/ciena-te:named-admin-groups" +
                 "/ciena-te:named-admin-group/ciena-te:name";
         }
         description
            "List of references to named admin-groups to exclude in
             path calculation.";
      }
      leaf-list include-all-group {
         type leafref {
            path "/ciena-te:te/ciena-te:globals/ciena-te:named-admin-groups" +
                 "/ciena-te:named-admin-group/ciena-te:name";
         } 
         description
            "List of references to named admin-groups of which all must
             be included";
      }
      leaf-list include-any-group {
         type leafref {
            path "/ciena-te:te/ciena-te:globals/ciena-te:named-admin-groups" +
                 "/ciena-te:named-admin-group/ciena-te:name";
         }
         description
            "List of references to named admin-groups of which one must
             be included";
      }
   }

   grouping tunnel-p2p-attributes-config {
      description
         "Configuration related to P2P LSPs";
      leaf destination {
         type inet:ip-address;
         description
            "P2P tunnel destination address";
      }
   }

   grouping te-tunnel-p2p-top {
      description
         "Top level grouping for P2P configuration";
      container p2p-tunnel-attributes {
         when "../config/type = 'oc-mplst:P2P'" {
            description
               "Include this container for LSPs of type P2P";
         }
         description
            "Parameters related to LSPs of type P2P";
         container config {
            description
               "Configuration parameters for P2P LSPs";
            uses tunnel-p2p-attributes-config;
         }
         uses p2p-primary-paths-top;
      }
   }
  
   grouping te-lsp-auto-bandwidth-config {
      description
         "Configuration parameters related to autobandwidth";
      leaf enabled {
         when "/ciena-rsvpte:rsvp-te-tunnels/ciena-rsvpte:tunnel/ciena-rsvpte:config/ciena-rsvpte:tunnel-stats-collection = 'on'" {
            description
               "Autobandwidth can be enabled only when
                stats collection is on";
         }
         type boolean;
         default false;
         description
            "Enables MPLS auto-bandwidth on the LSP";
      }
      leaf min-bw {
         type oc-mplst:bandwidth-kbps;
         description
            "Set the minimum bandwidth in Kbps for an
             auto-bandwidth LSP";
      }
      leaf max-bw {
         type oc-mplst:bandwidth-kbps;
         description
            "Set the maximum bandwidth in Kbps for an
             auto-bandwidth LSP";
      }
      leaf adjust-interval {
         type uint32;
         units seconds;
         description
            "Time in seconds between adjustments to
             LSP bandwidth";
      }
      leaf adjust-threshold {
         type oc-types:percentage;
         description
            "Percentage difference between the LSP's
             specified bandwidth and its current bandwidth
             allocation -- if the difference is greater than the
             specified percentage, auto-bandwidth adjustment is
             triggered";
      }
   }

   grouping te-tunnel-bandwidth-config {
      description
         "Configuration parameters related to bandwidth for a tunnel";
      leaf specification-type {
         type te-bandwidth-type;
         default SPECIFIED;
         description
            "The method used for setting the bandwidth, either explicitly
             specified or configured";
      }
      leaf set-bandwidth {
         when "../specification-type = 'SPECIFIED'" {
         description
            "The bandwidth value when bandwidth is explicitly
             specified";
         }
         type oc-mplst:bandwidth-kbps;
         description
            "Set bandwidth explicitly, e.g., using
             offline calculation";
      }
   }

   grouping te-tunnel-bandwidth-top {
      description
         "Top level grouping for specifying bandwidth for a tunnel";
      container bandwidth {
         description
            "Bandwidth configuration for TE LSPs";
         container config {
            description
               "Configuration parameters related to bandwidth on TE
                tunnels";
            uses te-tunnel-bandwidth-config;
         }
         container auto-bandwidth {
            when "../config/specification-type = 'AUTO'" {
            description
               "Include this container for auto bandwidth
                specific configuration";
            }
            description
               "Parameters related to auto-bandwidth";
            container config {
               description
                  "Configuration parameters relating to MPLS
                   auto-bandwidth on the tunnel.";
               uses te-lsp-auto-bandwidth-config;
            }
         }
      }
   }

   grouping te-tunnel-reoptimize-config {
      description
         "Definition for reoptimize timer configuration";
      leaf reoptimize-timer {
         type uint16;
         units seconds;
         description
            "Frequency of reoptimization of
             a traffic engineered LSP";
      }
   }

   grouping te-global-tunnel-config {
      description
         "Configuration parameters relevant to a single
          traffic engineered tunnel.";
      leaf name {
         type string {
            length "1..128";
         }
         description
            "The tunnel name";
      }
      leaf type {
         type identityref {
            base oc-mplst:TUNNEL_TYPE;
         }
         default oc-mplst:P2P;
         description
            "Tunnel type";
      }
      leaf description {
         type string {
            length "1..255";
         }
         description
            "Optional text description for the tunnel";
      }
      leaf admin-status {
         type identityref {
            base oc-mplst:TUNNEL_ADMIN_STATUS;
         }
         default oc-mplst:ADMIN_UP;
         description
            "TE tunnel administrative state.";
      }
      leaf protection-style-requested {
         type identityref {
            base oc-mplst:PROTECTION_TYPE;
         }
         default oc-mplst:UNPROTECTED;
         description
            "Style of mpls frr protection desired: can be
             link, link-node or unprotected.";
      }
      leaf fast-reroute-object {
         when "../protection-style-requested != 'oc-mplst:UNPROTECTED'" {
         description
            "The Fast Reroute configuration for signaling in FRR Obejct of this tunnel";
         }
         type leafref {
            path "/ciena-rsvp:rsvp-te/ciena-rsvp:fast-reroute-objects/ciena-rsvp:fast-reroute-object/ciena-rsvp:name";
         }
         description
            "The fast reroute configuration in FRR object of this tunnel";
      }
      uses te-tunnel-reoptimize-config;
      uses ciena-rsvp:rsvp-p2p-tunnel-attributes-config;  // Original was oc-rsvp:rsvp-p2p-tunnel-attributes-config
      leaf tunnel-stats-collection {
         type enumeration {
            enum off {
               description
                  "RSVP tunnel stats collection off";
            }
            enum on {
               description
                  "RSVP tunnel stats collection on.";
            }
         }
         default off;
         description
            "Stats collection on or off on RSVP-TE tunnel.";
      }
   }

   grouping te-tunnel-state {
      description
         "Counters and statistical data relevent to a single
          tunnel.";
      leaf oper-status {
         type identityref {
            base oc-mplst:LSP_OPER_STATUS;
         }
         description
            "The operational status of the TE tunnel";
      }
      leaf role {
         type identityref {
            base oc-mplst:LSP_ROLE;
         }
         description
            "The lsp role at the current node, whether it is headend,
             transit or tailend.";
      }
   }

   container rsvp-te-tunnels {
      description
         "RSVP-TE tunnel configuration";
      list tunnel {
         key "name";
         description
            "List of TE tunnels. This list contains only the LSPs that the
             current device originates (i.e., for which it is the head-end).
             Where the signaling protocol utilised for an LSP allows a mid-point
             or tail-end to be aware of the LSP (e.g., RSVP-TE), then the
             associated sessions are maintained per protocol";
         leaf name {
            type leafref {
               path "../config/name";
            }
            description
               "The tunnel name";
         }
         container config {
            description
               "Configuration parameters related to TE tunnels:";
            uses te-global-tunnel-config;
         }
         container state {
            config false;
            description
               "State parameters related to TE tunnels";
            uses te-tunnel-state;
         }
         uses te-tunnel-bandwidth-top;
         uses te-tunnel-p2p-top;
      }
   }

   rpc rsvp-te-tunnel-reoptimize {
      description
         "RPC to reoptimize the RSVP tunnel";
      input {
         leaf tunnel {
            type leafref {
               path "/ciena-rsvpte:rsvp-te-tunnels/ciena-rsvpte:tunnel/ciena-rsvpte:name";
            }
            description
               "Name of tunnel to be reoptimized with least path cost as suggested via cspf";
         }
      }
      output {
         leaf response {
            type string;
            description
               "The response could be 'success', or the reason for tunnel reoptimization failure";
         }
      }
   }
}